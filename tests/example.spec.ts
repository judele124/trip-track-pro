import { test, request, expect } from '@playwright/test';

const tripId = '67f7d0a7cc042e0fb8fc137b';

const tripStepsLocations = [
	[-74.005882, 40.712885],
	[-74.005885, 40.7129],
	[-74.005933, 40.712928],
	[-74.00595, 40.712964],
	[-74.00611, 40.713238],
	[-74.006057, 40.713303],
	[-74.006291, 40.713952],
	[-74.006252, 40.714023],
	[-74.006364, 40.714099],
	[-74.006415, 40.714225],
	[-74.006357, 40.714293],
	[-74.007579, 40.715375],
	[-74.007491, 40.715486],
	[-74.00664, 40.716568],
	[-74.00641, 40.716858],
	[-74.006198, 40.717128],
	[-74.005478, 40.718091],
	[-74.005411, 40.718197],
	[-74.00538, 40.718249],
	[-74.005329, 40.718341],
	[-74.005312, 40.718376],
	[-74.005238, 40.718548],
	[-74.005145, 40.719062],
	[-74.005148, 40.719189],
	[-74.005156, 40.71941],
	[-74.005167, 40.719775],
	[-74.00517, 40.719842],
	[-74.005171, 40.719902],
	[-74.005217, 40.720634],
	[-74.005251, 40.721032],
	[-74.005258, 40.721142],
	[-74.005289, 40.721602],
	[-74.005309, 40.721719],
	[-74.006205, 40.722488],
	[-74.006296, 40.7227],
	[-74.006227, 40.723049],
	[-74.006206, 40.72319],
	[-74.006117, 40.723761],
	[-74.006036, 40.723856],
	[-74.005822, 40.725024],
	[-74.005813, 40.725075],
	[-74.00572, 40.725601],
	[-74.005708, 40.725675],
	[-74.005545, 40.727157],
	[-74.005533, 40.727231],
	[-74.005437, 40.727819],
	[-74.005427, 40.727881],
	[-74.005414, 40.727958],
	[-74.005322, 40.728618],
	[-74.005314, 40.728675],
	[-74.005287, 40.728851],
	[-74.00522, 40.729302],
	[-74.005198, 40.729404],
	[-74.004688, 40.730321],
	[-74.00465, 40.730388],
	[-74.004226, 40.731129],
	[-74.004181, 40.731206],
	[-74.004068, 40.731405],
	[-74.003546, 40.732319],
	[-74.003439, 40.732507],
	[-74.003327, 40.732703],
	[-74.003263, 40.732815],
	[-74.00287, 40.733506],
	[-74.002811, 40.733609],
	[-74.002771, 40.73368],
	[-74.002741, 40.733733],
	[-74.002695, 40.733818],
	[-74.002591, 40.733996],
	[-74.002364, 40.734395],
	[-74.002258, 40.734578],
	[-74.002004, 40.735021],
	[-74.001968, 40.735081],
	[-74.00194, 40.735128],
	[-74.001697, 40.735535],
	[-74.001658, 40.735599],
	[-74.001571, 40.73575],
	[-74.001545, 40.735794],
	[-74.001174, 40.736479],
	[-74.00111, 40.736597],
	[-74.001031, 40.736703],
	[-74.000941, 40.736817],
	[-74.000917, 40.736847],
	[-74.000585, 40.737282],
	[-74.000496, 40.737408],
	[-74.000212, 40.737808],
	[-73.99968, 40.738558],
	[-73.999613, 40.73865],
	[-73.999402, 40.738942],
	[-73.999221, 40.739193],
	[-73.999182, 40.739246],
	[-73.998713, 40.739881],
	[-73.99867, 40.739944],
	[-73.998575, 40.740072],
	[-73.998331, 40.740409],
	[-73.998287, 40.74047],
	[-73.998245, 40.740527],
	[-73.99747, 40.741592],
	[-73.997434, 40.741642],
	[-73.997385, 40.741709],
	[-73.997046, 40.742174],
	[-73.997007, 40.742228],
	[-73.997002, 40.742234],
	[-73.99687, 40.742412],
	[-73.996618, 40.742759],
	[-73.99657, 40.742825],
	[-73.996536, 40.742871],
	[-73.995983, 40.743635],
	[-73.995906, 40.743741],
	[-73.995713, 40.744004],
	[-73.99571, 40.744008],
	[-73.995638, 40.744106],
	[-73.995568, 40.744203],
	[-73.995201, 40.744707],
	[-73.995159, 40.744765],
	[-73.995108, 40.744835],
	[-73.995013, 40.744966],
	[-73.994747, 40.745331],
	[-73.994262, 40.746004],
	[-73.993403, 40.74718],
	[-73.993362, 40.747236],
	[-73.99332, 40.747294],
	[-73.993313, 40.747303],
	[-73.992954, 40.747795],
	[-73.992907, 40.74786],
	[-73.992905, 40.747863],
	[-73.992868, 40.747914],
	[-73.992505, 40.748412],
	[-73.992006, 40.749101],
	[-73.99197, 40.74915],
	[-73.991865, 40.749293],
	[-73.991615, 40.749634],
	[-73.991591, 40.749667],
	[-73.991563, 40.749706],
	[-73.991149, 40.750272],
	[-73.991098, 40.750342],
	[-73.991065, 40.750389],
	[-73.990677, 40.750921],
	[-73.990612, 40.751009],
	[-73.99055, 40.751094],
	[-73.990174, 40.751604],
	[-73.990134, 40.751659],
	[-73.989688, 40.752289],
	[-73.989646, 40.752345],
	[-73.988736, 40.753586],
	[-73.988378, 40.754072],
	[-73.988323, 40.754147],
	[-73.988275, 40.754213],
	[-73.987848, 40.754811],
	[-73.987692, 40.75503],
	[-73.987485, 40.75532],
	[-73.987447, 40.755373],
	[-73.987402, 40.755433],
	[-73.987015, 40.755949],
	[-73.986949, 40.756036],
	[-73.986398, 40.756795],
	[-73.986363, 40.756845],
	[-73.986056, 40.757279],
	[-73.986012, 40.757342],
	[-73.985952, 40.757419],
	[-73.985589, 40.757892],
	[-73.985533, 40.757963],
];

const users = [
	{ email: 'test1@gmail.com' },
	{ email: 'test2@gmail.com' },
	{ email: 'test3@gmail.com' },
	{ email: 'test4@gmail.com' },
	{ email: 'test5@gmail.com' },
];

test('multiple users go through entry and login to reach /trip/map', async ({
	browser,
}) => {
	const apiContext = await request.newContext(); // for calling your backend

	await Promise.all(
		users.map(async ({ email }) => {
			const context = await browser.newContext({
				geolocation: {
					latitude: tripStepsLocations[0][1],
					longitude: tripStepsLocations[0][0],
				},
				permissions: ['geolocation'],
			});

			const page = await context.newPage();

			// Navigate and simulate flow
			await page.goto('http://localhost:5173/');
			await page.getByText('Skip').click();

			await page.goto(`http://localhost:5173/app/join-trip?tripId=${tripId}`);
			await page.getByRole('button', { name: 'join' }).click();
			await page.getByRole('button', { name: 'Login as user' }).click();

			await page.getByRole('textbox').fill(email);
			await page.getByRole('button', { name: 'Send code' }).click();

			// Fetch the code from your API
			const response = await apiContext.post(
				'http://localhost:3000/auth/send-code',
				{
					data: { email },
				}
			);

			const { code } = await response.json();

			// Enter code and submit
			await page.getByRole('textbox').fill(code);
			await page.getByRole('button', { name: 'Verify code' }).click();

			for (const coords of tripStepsLocations) {
				await context.setGeolocation({
					latitude: coords[1],
					longitude: coords[0],
				});
				await new Promise((res) => setTimeout(res, 100));
			}

			await page.screenshot({ path: `./screenshots/${email}.png` });
		})
	);
});
